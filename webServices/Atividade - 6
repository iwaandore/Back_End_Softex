const express = require('express');
const router = express.Router();
const db = require('../models');

// Cria um novo registro
router.post('/', async (req, res) => {
  try {
    const { nome, email, idade } = req.body;
    const novoUsuario = await db.Usuario.create({ nome, email, idade });
    res.status(201).json(novoUsuario);
  } catch (error) {
    res.status(500).json({ erro: 'Não foi possível criar um novo usuário' });
  }
});

// Retorna todos os registros
router.get('/', async (req, res) => {
  try {
    const usuarios = await db.Usuario.findAll();
    res.status(200).json(usuarios);
  } catch (error) {
    res.status(500).json({ erro: 'Não foi possível buscar os usuários' });
  }
});

// Retorna um registro específico
router.get('/:id', async (req, res) => {
  try {
    const usuario = await db.Usuario.findByPk(req.params.id);
    if (!usuario) {
      return res.status(404).json({ erro: 'Usuário não encontrado' });
    }
    res.status(200).json(usuario);
  } catch (error) {
    res.status(500).json({ erro: 'Não foi possível buscar o usuário' });
  }
});

// Atualiza um registro existente
router.put('/:id', async (req, res) => {
  try {
    const usuario = await db.Usuario.findByPk(req.params.id);
    if (!usuario) {
      return res.status(404).json({ erro: 'Usuário não encontrado' });
    }
    const { nome, email, idade } = req.body;
    await usuario.update({ nome, email, idade });
    res.status(200).json(usuario);
  } catch (error) {
    res.status(500).json({ erro: 'Não foi possível atualizar o usuário' });
  }
});

// Remove um registro existente
router.delete('/:id', async (req, res) => {
  try {
    const usuario = await db.Usuario.findByPk(req.params.id);
    if (!usuario) {
      return res.status(404).json({ erro: 'Usuário não encontrado' });
    }
    await usuario.destroy();
    res.status(204).send();
  } catch (error) {
    res.status(500).json({ erro: 'Não foi possível remover o usuário' });
  }
});

module.exports = router;
